;; Resolver 8-puzzle utilizando una heuristica de Manhattan 
;; EL INDEX DE LA LISTA INICIA EN 0
(DEFVAR *META* '(1 2 3 4 5 6 7 8 0))
(SETQ 
 OPENSTACK '()
 CLOSESTACK '()
)
(DEFUN MANHATTAN (ESTADO)
  (SETQ DISTANCIA 0)
  (DOTIMES (N 9)
    (INCF DISTANCIA
    (+ 
     (ABS (- (POSX (POSITION N ESTADO)) (POSX N)))
     (ABS (- (POSY (POSITION N ESTADO)) (POSY N)))
   )
    )
)
(RETURN-FROM MANHATTAN DISTANCIA)
)
(DEFUN POSX (INDEX)
 ;;Funcion que ayuda a convertir en posicion cartesiana discreta. 
  (RETURN-FROM POSX  (MOD INDEX 3) ) 
)
(DEFUN POSY (INDEX)
  ;;Funcion que ayuda a convertir en posisicon cartesiana discreta
  (RETURN-FROM POSY  (FLOOR INDEX 3) )
)
(DEFUN SWAP (ESTADO INDEXA INDEXB)
  ;;Funcion para cambiar dos valores, regresa un estado.
  (SETQ NEWLIST (COPY-LIST ESTADO))
  (ROTATEF (NTH INDEXA NEWLIST) (NTH INDEXB NEWLIST))
  (RETURN-FROM SWAP NEWLIST)
)
(DEFUN GETZERO (ESTADO)
  (RETURN-FROM GETZERO (POSITION 0 ESTADO))
)
(DEFUN UP (ESTADO)
 ;;REGRESA NIL SI ES INVALIDO, UN NODO NUEVO SI ES VALIDO.
 (COND
  ((EQ (POSX (POSITION 0 ESTADO)) 0)
   (RETURN-FROM UP '())
   )
  (T
   (RETURN-FROM UP (SWAP ESTADO (GETZERO ESTADO) (- (GETZERO ESTADO) 3)))
   )
  )
)
(DEFUN DOWN (ESTADO)
 ;;REGRESA NIL SI ES INVALIDO, UN NODO NUEVO SI ES VALIDO.
 (COND
  ((EQ (POSY (POSITION 0 ESTADO)) 2)
   (RETURN-FROM DOWN '())
   )
  (T
   (RETURN-FROM DOWN (SWAP ESTADO (GETZERO ESTADO) (+ (GETZERO ESTADO) 3)))
   )
  )
)
(DEFUN RIGHT (ESTADO)
 ;;REGRESA NIL SI ES INVALIDO, UN NODO NUEVO SI ES VALIDO.
 (COND
  ((EQ (POSX (POSITION 0 ESTADO)) 2)
   (RETURN-FROM RIGHT '())
   )
  (T
   (RETURN-FROM RIGHT (SWAP ESTADO (GETZERO ESTADO) (MOD (GETZERO ESTADO) 3)))
   )
  )
)

(DEFUN LEFT (ESTADO)
 ;;REGRESA NIL SI ES INVALIDO, UN NODO NUEVO SI ES VALIDO.
 (COND
  ((EQ (POSX (POSITION 0 ESTADO)) 0)
   (RETURN-FROM LEFT '())
   )
  (T
   (RETURN-FROM LEFT (SWAP ESTADO (GETZERO ESTADO) (MOD (GETZERO ESTADO) 3)))
   )
  )
)
(DEFUN MAKEMOVE (ESTADO MOVIMIENTO)
  (COND
   ((EQ MOVIMIENTO 'U)
    (RETURN-FROM MAKEMOVE (UP ESTADO))
    )
   ((EQ MOVIMIENTO 'D)
    (RETURN-FROM MAKEMOVE (DOWN ESTADO))
    )
   ((EQ MOVIMIENTO 'L)
    (RETURN-FROM MAKEMOVE (LEFT ESTADO))
    )
   ((EQ MOVIMIENTO 'R)
    (RETURN-FROM MAKEMOVE (RIGHT ESTADO))
    )
   (T
    (WRITE 'ERROR)
    (RETURN-FROM MAKEMOVE '())
    )
   )
)

(DEFUN EXPAND (NODO)
  (SETQ 
   ARRIBA (MAKEMOVE (SECOND NODO) 'U)
   ABAJO (MAKEMOVE (SECOND NODO) 'D)
   DERECHA (MAKEMOVE (SECOND NODO) 'R)
   IZQUIERDA (MAKEMOVE (SECOND NODO) 'L)
   HIJOS NIL
   )
   (IF (NOT(EQ ARRIBA NIL))
    (PUSH (LIST (INCF IDNODO) ARRIBA (+ (THIRD NODO) 1) (MANHATTAN ARRIBA) 'U (FIRST NODO)) HIJOS)
    )
    (IF (NOT(EQ ABAJO NIL))
     (PUSH (LIST (INCF IDNODO) ABAJO (+ (THIRD NODO) 1) (MANHATTAN ABAJO) 'D (FIRST NODO)) HIJOS)
    )
   (IF (NOT(EQ DERECHA NIL))
    (PUSH (LIST (INCF IDNODO) DERECHA (+ (THIRD NODO) 1) (MANHATTAN DERECHA) 'R (FIRST NODO)) HIJOS)
    )
   (IF (NOT(EQ IZQUIERDA  NIL))
    (PUSH (LIST (INCF IDNODO) IZQUIERDA (+ (THIRD NODO) 1) (MANHATTAN IZQUIERDA) 'L (FIRST NODO)) HIJOS)
    )
  (RETURN-FROM EXPAND HIJOS)
)

(DEFUN CALCULACOSTO (NODO)
;;Funcion que calcula el costo de un nodo, utilizando el nivel (#movimientos para llegar a ese estado) y la distancia manhattan (funcion heuristica).
 (RETURN-FROM CALCULACOSTO (+ (THIRD NODO) (FOURTH NODO)))
)
(DEFUN ADDOPEN (NODO)

)


;;Nodo::Struct (id::number, Estado::list, nivel::number, manhattan(estado),operacion::symbol, padre::number 
;;(SETQ ESTADOS '(1 2 3 4 0 5 6 7 8))
(SETQ IDNODO 1)
(SETQ NODOTEST '( 1 (1 2 3 4 0 5 6 7 8) 0 (MANHATTAN (1 2 3 4 0 5 6 7 8)) 'U 0) )
(EXPAND NODOTEST)
